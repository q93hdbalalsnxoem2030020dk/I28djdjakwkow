local Settings = {
    rewrittenmain = {
        Enabled = true,
        DOT = true,
        AIRSHOT = true,
        NOTIF = true,
        AUTOPRED = true,
        FOV = math.huge,
        RESOVLER = false
    }
}

local SelectedPart = "HumanoidRootPart"
local Prediction = true
local PredictionValue = 0.17053984222
local AnchorCount = 0
local MaxAnchor = 50
local CC = game:GetService("Workspace").CurrentCamera
local Plr
local enabled = false
local accomidationfactor = 0.121
local mouse = game.Players.LocalPlayer:GetMouse()
local placemarker = Instance.new("Part", game.Workspace)

function makemarker(Parent, Adornee, Color, Size, Size2)
    local e = Instance.new("BillboardGui", Parent)
    e.Name = "PP"
    e.Adornee = Adornee
    e.Size = UDim2.new(Size, Size2, Size, Size2)
    e.AlwaysOnTop = Settings.rewrittenmain.DOT
    local a = Instance.new("Frame", e)
    a.Size = UDim2.new(1, 1, 1, 1)
    a.BackgroundTransparency = Settings.rewrittenmain.DOT and 0 or 1
    a.BackgroundColor3 = Color
    local g = Instance.new("UICorner", a)
    g.CornerRadius = UDim.new(1, 1)
    return e
end

local function getClosestPlayerToCursor()
    local closestPlayer
    local shortestDistance = Settings.rewrittenmain.FOV
    for _, v in pairs(game.Players:GetPlayers()) do
        if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 and v.Character:FindFirstChild("HumanoidRootPart") then
            local pos = CC:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(mouse.X, mouse.Y)).magnitude
            if magnitude < shortestDistance then
                closestPlayer = v
                shortestDistance = magnitude
            end
        end
    end
    return closestPlayer
end

local pingvalue = nil
local split = nil
local ping = nil

spawn(function()
    placemarker.Anchored = true
    placemarker.CanCollide = false
    placemarker.Size = Vector3.new(0, 0, 0)
    placemarker.Transparency = 0.75
    if Settings.rewrittenmain.DOT then
        makemarker(placemarker, placemarker, Color3.fromRGB(255, 0, 0), 1, 0)
    end
end)

game:GetService("RunService").Stepped:connect(function()
    if enabled and Plr and Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") then
        placemarker.CFrame = CFrame.new(Plr.Character.HumanoidRootPart.Position + (Plr.Character.HumanoidRootPart.Velocity * accomidationfactor))
    else
        placemarker.CFrame = CFrame.new(0, 9999, 0)
    end
    if Settings.rewrittenmain.AUTOPRED then
        pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
        split = string.split(pingvalue, '(')
        ping = tonumber(split[1])
        if ping < 130 then
            PredictionValue = 0.150
        elseif ping < 125 then
            PredictionValue = 0.16
        elseif ping < 110 then
            PredictionValue = 0.15
        elseif ping < 105 then
            PredictionValue = 0.15
        elseif ping < 90 then
            PredictionValue = 0.1482
        elseif ping < 80 then
            PredictionValue = 0.142
        elseif ping < 70 then
            PredictionValue = 0.142
        elseif ping < 60 then
            PredictionValue = 0.12731
        elseif ping < 50 then
            PredictionValue = 0.125
        elseif ping < 40 then
            PredictionValue = 0.1325
        elseif ping < 30 then
            PredictionValue = 0.113
        elseif ping < 20 then
            PredictionValue = 0.112
        elseif ping < 10 then
            PredictionValue = 0.085
        end
    end
end)

local mt = getrawmetatable(game)
local old = mt.__namecall
setreadonly(mt, false)
mt.__namecall = newcclosure(function(...)
    local args = { ... }
    if enabled and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePos" and Settings.rewrittenmain.Enabled and Plr and Plr.Character then
        if Prediction then
            args[3] = Plr.Character[SelectedPart].Position + (Plr.Character[SelectedPart].Velocity * PredictionValue)
        else
            args[3] = Plr.Character[SelectedPart].Position
        end
        return old(unpack(args))
    end
    return old(...)
end)

game:GetService("RunService").RenderStepped:Connect(function()
    if Settings.rewrittenmain.RESOVLER and Plr and Plr.Character and enabled and Settings.rewrittenmain.Enabled then
        if Settings.rewrittenmain.AIRSHOT and enabled then
            if Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                if Plr.Character.HumanoidRootPart.Anchored then
                    AnchorCount = AnchorCount + 1
                    if AnchorCount >= MaxAnchor then
                        Prediction = false
                        wait(2)
                        AnchorCount = 0
                    end
                else
                    Prediction = true
                    AnchorCount = 0
                end
                SelectedPart = "LeftFoot"
            else
                if Plr.Character.HumanoidRootPart.Anchored then
                    AnchorCount = AnchorCount + 1
                    if AnchorCount >= MaxAnchor then
                        Prediction = false
                        wait(2)
                        AnchorCount = 0
                    end
                else
                    Prediction = true
                    AnchorCount = 0
                end
                SelectedPart = "HumanoidRootPart"
            end
        else
            if Plr.Character.HumanoidRootPart.Anchored then
                AnchorCount = AnchorCount + 1
                if AnchorCount >= MaxAnchor then
                    Prediction = false
                    wait(2)
                    AnchorCount = 0
                end
            else
                Prediction = true
                AnchorCount = 0
            end
            SelectedPart = "HumanoidRootPart"
        end
    else
        SelectedPart = "HumanoidRootPart"
    end
end)

local MyAss = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local TextButton = Instance.new("TextButton")
local UICorner_2 = Instance.new("UICorner")

MyAss.Name = "MyAss"
MyAss.Parent = game.CoreGui

Frame.Parent = MyAss
Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Frame.Position = UDim2.new(0.5, -100, 0.5, -40)
Frame.Size = UDim2.new(0, 200, 0, 80)
Frame.Active = true
Frame.Draggable = true

UICorner.Parent = Frame

TextButton.Parent = Frame
TextButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
TextButton.Position = UDim2.new(0.05, 0, 0.2, 0)
TextButton.Size = UDim2.new(0.9, 0, 0.6, 0)
TextButton.Font = Enum.Font.GothamSemibold
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextSize = 16
TextButton.Text = "lock {off}"

UICorner_2.Parent = TextButton

TextButton.MouseButton1Click:Connect(function()
    if enabled then
        enabled = false
        TextButton.Text = "lock {off}"
        if Settings.rewrittenmain.NOTIF then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Red Dotlock",
                Text = "Unlocked :)",
                Duration = 5
            })
        end
    else
        enabled = true
        Plr = getClosestPlayerToCursor()
        TextButton.Text = "lock {on}"
        if Settings.rewrittenmain.NOTIF and Plr and Plr.Character then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Red Dotlock",
                Text = "Target: " .. tostring(Plr.Character.Humanoid.DisplayName),
                Duration = 5
            })
        end
    end
end)
